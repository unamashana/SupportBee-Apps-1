{"body":"## SupportBee App Platform\r\n\r\n### Introduction\r\n\r\nSupportBee Apps are the easiest, yet powerful way of extending/customizing SupportBee helpdesk. This platform exposes the API in a easily consumable way. The Apps are hosted on SupportBee servers.\r\n\r\nIf you are new to SupportBee, please have a look at how it works [here](https://supportbee.com)\r\n\r\n### How does the App Platform Work?\r\n\r\nAn **App** is deeply integrated with SupportBee helpdesk. It can receive **Events** from SupportBee. It can also define **Actions**.  \r\n\r\n_Events_ are triggered by SupportBee during various times of the lifecycle of a ticket. Currently the platform supports the following _Events_:\r\n* Ticket Created\r\n* Agent Reply Created\r\n* Customer Reply Created\r\n* Comment Created  \r\n\r\nAn App can consume one, many or all events. For example an App can send an SMS to a cell when the event \"Ticket Created\" is triggered.\r\n\r\n_Actions_ are triggered by the user of SupportBee helpdesk from the User Interface. Currently the platform supports a single action called _Button_. If an App defines a Button action, a UI component is rendered for Ticket Listings in the SupportBee UI as shown below\r\n\r\n![The Button](http://i.imgur.com/1KURN.png)\r\n\r\nWe will go more into this later.\r\n\r\n### Writing an App\r\n\r\nCheckout the App platform from github  \r\n``git clone git://github.com/SupportBee/SupportBee-Apps.git``\r\n\r\nCreate a new branch with app\\_name as its name  \r\n``git branch campfire``\r\n\r\nBundle install and run the server locally using shotgun  \r\n``bundle install``  \r\n``shotgun``\r\n\r\nUnfortunately, server requires a restart every time you change the app.\r\n\r\nAn App resides in the ``/apps`` folder of the App Platform. Each app has the following structure:\r\n\r\n```\r\ndummy\r\n|--assets\r\n|  |--views\r\n|     |\r\n|\r\n|--dummy.rb\r\n|--config.yml\r\n```\r\n\r\n#### config.yml\r\nEach app has a ``config.yml`` where all the configurations of the app are defined. \r\n\r\n```\r\nname: Dummy\r\nslug: dummy\r\naccess: public\r\ndescription: This is to test and a boilerplate app.\r\ndeveloper: \r\n  name: SupportBee\r\n  email: SupportBee\r\n  twitter: @supportbee\r\n  github: SupportBee\r\naction:\r\n  button:\r\n    screens: \r\n    - all\r\n    - unassigned\r\n    listing: \r\n    - all\r\n    label: Send To Dummy\r\n```\r\n\r\nThe ``slug`` should be unique across the platform.\r\n\r\n\r\n#### {slug}.rb\r\nThe app logic is defined in this file. The whole app can be defined in this single file or can be spread across multiple files which are required here. The basic structure is as follows:\r\n\r\n```\r\nmodule Dummy\r\n  module EventHandler\r\n    def ticket_created; end\r\n    def ticket_updated; end\r\n\r\n    def reply_created; end\r\n    def reply_updated; end\r\n\r\n    def all_events; end\r\n  end\r\nend\r\n\r\nmodule Dummy\r\n  module ActionHandler\r\n    def action_button\r\n     # Handle Action here\r\n    end\r\n\r\n    def all_actions\r\n    end\r\n  end\r\nend\r\n\r\nmodule Dummy\r\n  class Base < SupportBeeApp::Base\r\n    string :name, :required => true\r\n    password :key, :required => true, :label => 'Token'\r\n    boolean :active, :default => true\r\n  end\r\nend\r\n```\r\n\r\n#### Define Settings\r\nAn app can specify the settings required by it in the ``Base`` class. These settings are accepted when the app is added to a SupportBee helpdesk. \r\n\r\n```\r\nmodule Dummy\r\n  class Base < SupportBeeApp::Base\r\n    string :name, :required => true\r\n    password :key, :required => true, :label => 'Token'\r\n    boolean :active, :default => true\r\n  end\r\nend\r\n```\r\n\r\nAn app can define a ``string``, ``password`` or a ``boolean`` type of setting. Each setting accepts a ``name`` of the settings and a set of options\r\n\r\n* :label; if not defined, the name is humanized and rendered as the label\r\n* :required\r\n* :default\r\n\r\n![The Setting](http://i.imgur.com/B1Re6.png)\r\n\r\n#### Consume Events\r\nAn App can consume events by defining methods in ``EventHandler`` module.\r\n\r\n```\r\nmodule Dummy\r\n  module EventHandler\r\n    def ticket_created; end\r\n    def ticket_updated; end\r\n\r\n    def reply_created; end\r\n    def reply_updated; end\r\n\r\n    def all_events; end\r\n  end\r\nend\r\n```\r\n\r\nThe event ``ticket.created`` triggers the method ``ticket_created`` and so on. The method ``all_events`` if defined is triggered for all events.\r\n\r\nAll the methods have access to the following information:\r\n* **auth**: This is required to get SupportBee API access for the helpdesk which triggered the App. \r\n* **settings**: This contains the values of the settings defined by the app for the helpdesk which triggered the App.\r\n* **payload**: This contains the event/action relavent data. This changes depending on the type of event or action.\r\n\r\nHere is an example of a Campfire App posting to campfire on ticket creation.\r\n\r\n```\r\ndef ticket_created\r\n  campfire = Tinder::Campfire.new settings.subdomain, :token => settings.token\r\n  room = campfire.find_room_by_name(settings.room)\r\n  room.speak \"New Ticket: #{payload.ticket.subject}\"\r\nend\r\n```\r\n\r\n#### Respond To Actions\r\nAn App can respond to actions by defining methods in ``ActionHandler``. Currently only one action is allowed; _button_.\r\n\r\n```\r\nmodule ActionHandler\r\n  def button\r\n    # Handle Action here\r\n    [200, \"Success\"]\r\n  end\r\n\r\n  def all_actions\r\n  end\r\nend\r\n```\r\n\r\n**Button Action**\r\n\r\nFor a button action to work; you need to configure it in ``config.yml``\r\n\r\n```\r\naction:\r\n  button:\r\n    screens:\r\n    - all\r\n    - unassigned\r\n    label: Send To Dummy\r\n```\r\n\r\nThis renders a ``Send To Dummy`` action in the SupportBee UI for ``Unassigned`` and ``All``. When this action is triggered in the UI the method ``button`` is triggered.All actions must return a status and a optional message.  \r\n``[200, \"Successfully sent to Dummy\"]``\r\n\r\nAll action methods have access to the same information as events. In addition to these a list of ticket ids selected in the listing at the time of the trigger is also provided. A button action can also define an overlay which can be used to accept more information. [Handlebars](http://handlebarsjs.com/) templating language is used to specify the overlay. The template is defined in ``APP_ROOT/assets/views/button/overlay.hbs``. When the button action is triggered this overlay will receive the list of ticket ids selected. A boilerplate of the handlebars code is as follows:\r\n\r\n```\r\n{{#ifTicketsCountZero tickets}}\r\n  Do Something\r\n{{/ifTicketsCountZero}}\r\n\r\n{{#ifTicketsCountOne tickets}}\r\n  Iterate over one ticket\r\n  {{#each tickets}}\r\n    {{subject}}\r\n  {{/each}}\r\n{{/ifTicketsCountZero}}\r\n\r\n{{#ifTicketsCountZero tickets}}\r\n  Iterate over many tickets\r\n  {{#each tickets}}\r\n    {{subject}}\r\n  {{/each}}\r\n{{/ifTicketsCountZero}}\r\n```\r\n\r\n### Testing/Development Console\r\nWe have created a simple console to easily trigger your Apps with sample payloads. Right now it only supports _Events_. Soon you will be able to trigger actions also. To access the console of your app go to ``/{app_slug}/console`` when running the platform locally.\r\n\r\n![The Console](http://i.imgur.com/35VpD.png)\r\n\r\n### More Docs to come:\r\n#### SupportBee Objects\r\n#### Event and Action Payloads\r\n#### List of Apps to be developed\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Bee Powered!","google":"","name":"SupportBee Apps"}